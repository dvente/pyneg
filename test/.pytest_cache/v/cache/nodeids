[
  "comms/test_atomic_constraint.py::TestAtomicConstraint::test_dict_of_no_good_contains_it",
  "comms/test_atomic_constraint.py::TestAtomicConstraint::test_equal_no_goods_are_equal",
  "comms/test_atomic_constraint.py::TestAtomicConstraint::test_no_good_is_not_equal_to_other_type_object",
  "comms/test_atomic_constraint.py::TestAtomicConstraint::test_no_good_with_different_issue_are_unequal",
  "comms/test_atomic_constraint.py::TestAtomicConstraint::test_no_good_with_different_value_are_unequal",
  "comms/test_atomic_constraint.py::TestAtomicConstraint::test_non_satisfying_value_returns_false",
  "comms/test_atomic_constraint.py::TestAtomicConstraint::test_satisfying_value_returns_true",
  "comms/test_message.py::TestMessage::test_accept_message_formating",
  "comms/test_message.py::TestMessage::test_acceptation_message_is_acceptation",
  "comms/test_message.py::TestMessage::test_acceptation_message_is_not_emtpy",
  "comms/test_message.py::TestMessage::test_acceptation_message_is_not_offer",
  "comms/test_message.py::TestMessage::test_acceptation_message_is_not_termination",
  "comms/test_message.py::TestMessage::test_constraint_message_formatting",
  "comms/test_message.py::TestMessage::test_constraint_message_has_constraint",
  "comms/test_message.py::TestMessage::test_constraint_message_is_not_acceptation",
  "comms/test_message.py::TestMessage::test_constraint_message_is_not_emtpy",
  "comms/test_message.py::TestMessage::test_constraint_message_is_not_termination",
  "comms/test_message.py::TestMessage::test_constraint_message_with_wrong_data_type_raises_value_error",
  "comms/test_message.py::TestMessage::test_empty_message_cant_have_content",
  "comms/test_message.py::TestMessage::test_empty_message_formating",
  "comms/test_message.py::TestMessage::test_empty_message_has_not_constraint",
  "comms/test_message.py::TestMessage::test_empty_message_is_empty",
  "comms/test_message.py::TestMessage::test_empty_message_is_not_acceptation",
  "comms/test_message.py::TestMessage::test_empty_message_is_not_offer",
  "comms/test_message.py::TestMessage::test_empty_message_is_not_termination",
  "comms/test_message.py::TestMessage::test_eq_is_reflexive",
  "comms/test_message.py::TestMessage::test_eq_is_symmetrical",
  "comms/test_message.py::TestMessage::test_get_constraint",
  "comms/test_message.py::TestMessage::test_get_constraint_from_non_constraint_message_raises_error",
  "comms/test_message.py::TestMessage::test_get_offer",
  "comms/test_message.py::TestMessage::test_invalid_message_kind_raises_value_error",
  "comms/test_message.py::TestMessage::test_non_dict_offer_raises_error",
  "comms/test_message.py::TestMessage::test_non_empty_message_without_offer_raises_error",
  "comms/test_message.py::TestMessage::test_offer_message_formatting",
  "comms/test_message.py::TestMessage::test_offer_message_is_not_acceptation",
  "comms/test_message.py::TestMessage::test_offer_message_is_not_emtpy",
  "comms/test_message.py::TestMessage::test_offer_message_is_not_termination",
  "comms/test_message.py::TestMessage::test_offer_message_is_offer",
  "comms/test_message.py::TestMessage::test_termination_message_formatting",
  "comms/test_message.py::TestMessage::test_termination_message_is_not_acceptation",
  "comms/test_message.py::TestMessage::test_termination_message_is_not_emtpy",
  "comms/test_message.py::TestMessage::test_termination_message_is_not_offer",
  "comms/test_message.py::TestMessage::test_termination_message_is_termination",
  "comms/test_offer.py::TestOffer::test_invalid_offer_is_rejected",
  "comms/test_offer.py::TestOffer::test_valid_offer_is_accepted",
  "engine/test_dtp_generator.py::TestDTPGenerator::test_trivial",
  "engine/test_enum_generator.py::TestEnumGenerator::test_generates_best_offer_first_time",
  "engine/test_enum_generator.py::TestEnumGenerator::test_generates_expected_offer_fith_time",
  "engine/test_enum_generator.py::TestEnumGenerator::test_generates_expected_offer_forth_time",
  "engine/test_enum_generator.py::TestEnumGenerator::test_generates_next_best_offer_second_time",
  "engine/test_enum_generator.py::TestEnumGenerator::test_generates_next_next_best_offer_third_time",
  "engine/test_enum_generator.py::TestEnumGenerator::test_get_max_utility",
  "engine/test_enum_generator.py::TestEnumGenerator::test_get_max_utility_fails_if_not_set",
  "engine/test_enum_generator.py::TestEnumGenerator::test_terminates_after_options_become_unacceptable",
  "engine/test_enum_generator.py::TestEnumGenerator::test_terminates_first_time_if_no_options_are_acceptable",
  "engine/test_linear_evaluator.py::TestLinearEvaluator::test_calc_offer_utility",
  "engine/test_linear_evaluator.py::TestLinearEvaluator::test_calc_strat_utility",
  "engine/test_problog_evaluators.py::TestProblogEvaluator::test_calc_offer_utility_problog",
  "engine/test_problog_evaluators.py::TestProblogEvaluator::test_umbrella_calc",
  "engine/test_random_generator.py::TestRandomGenerator::test_generate_offer",
  "engine/test_random_generator.py::TestRandomGenerator::test_generate_offer_exits_if_unable_to_find_solution",
  "engine/test_random_generator.py::TestRandomGenerator::test_init_uniform_strategy",
  "engine/test_random_generator.py::TestRandomGenerator::test_terminates_negotiation_after_max_rounds",
  "engine/test_strategy.py::TestStrategy::test_format_problog_strat",
  "engine/test_strategy.py::TestStrategy::test_invalid_strat_is_rejected",
  "engine/test_strategy.py::TestStrategy::test_strat_with_non_dist_is_rejected",
  "engine/test_strategy.py::TestStrategy::test_valid_strat_is_accepted",
  "utils/test_utils.py::TestUtils::test_atom_dict_to_nested_dict_valid",
  "utils/test_utils.py::TestUtils::test_atom_to_nested_dict",
  "utils/test_utils.py::TestUtils::test_generates_matrices_of_right_dimentions",
  "utils/test_utils.py::TestUtils::test_neg_scenario_from_util_matrices_returns_propper_types",
  "utils/test_utils.py::TestUtils::test_nested_to_atomic_dict",
  "utils/test_utils.py::TestUtils::test_rho_0_counts_all_possibilities_2_by_2",
  "utils/test_utils.py::TestUtils::test_rho_0_counts_all_possibilities_2_by_3",
  "utils/test_utils.py::TestUtils::test_rho_0_counts_all_possibilities_5_by_6",
  "utils/test_utils.py::TestUtils::test_rho_exceeds_n_makes_counts_0",
  "utils/test_utils.py::TestUtils::test_sum_of_rho_exceeds_n_makes_counts_0",
  "utils/test_utils.py::TestUtils::test_tau_of_0_creates_only_0_or_1",
  "utils/test_utils.py::TestUtils::test_trivial_2_by_2_example_is_counted_correctly",
  "utils/test_utils.py::TestUtils::test_valid_sparse_atom_dict_to_nested_dict"
]